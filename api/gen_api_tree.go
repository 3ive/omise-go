package api

/*
!!! DO NOT MODIFY !!!

autogenerated
 src: gen_api_tree.tmpl
 job: &main.GenAPITreeJob{Names:[]string{"Account", "Balance", "Card", "Charge", "Customer", "Dispute", "Recipient", "Refund", "Token", "Transaction", "Transfer"}, Operations:map[string][]string{"Recipient":[]string{"Create", "Destroy", "List", "Retrieve", "Update"}, "Refund":[]string{"Create", "List", "Retrieve"}, "Card":[]string{"Destroy", "List", "Retrieve", "Update"}, "Account":[]string{"Retrieve"}, "Balance":[]string{"Retrieve"}, "Charge":[]string{"Capture", "Create", "List", "Retrieve", "Update"}, "Token":[]string{"Create", "Retrieve"}, "Transfer":[]string{"Create", "Destroy", "List", "Retrieve", "Update"}, "Dispute":[]string{"List", "Retrieve", "Update"}, "Transaction":[]string{"List", "Retrieve"}, "Customer":[]string{"Create", "Destroy", "List", "Retrieve", "Update"}}}
  on: Thu Nov 19 10:14:19 +0700 2015
  by: chakrit
*/

import (
	"github.com/omise/omise-go"
	"github.com/omise/omise-go/operations"
)

type API struct {
	Account struct {
		Retrieve func(op *operations.RetrieveAccount) (*omise.Account, error)
	}

	Balance struct {
		Retrieve func(op *operations.RetrieveBalance) (*omise.Balance, error)
	}

	Card struct {
		Destroy  func(op *operations.DestroyCard) (*omise.Deletion, error)
		List     func(op *operations.ListCards) (*omise.CardList, error)
		Retrieve func(op *operations.RetrieveCard) (*omise.Card, error)
		Update   func(op *operations.UpdateCard) (*omise.Card, error)
	}

	Charge struct {
		Capture  func(op *operations.CaptureCharge) (*omise.Charge, error)
		Create   func(op *operations.CreateCharge) (*omise.Charge, error)
		List     func(op *operations.ListCharges) (*omise.ChargeList, error)
		Retrieve func(op *operations.RetrieveCharge) (*omise.Charge, error)
		Update   func(op *operations.UpdateCharge) (*omise.Charge, error)
	}

	Customer struct {
		Create   func(op *operations.CreateCustomer) (*omise.Customer, error)
		Destroy  func(op *operations.DestroyCustomer) (*omise.Deletion, error)
		List     func(op *operations.ListCustomers) (*omise.CustomerList, error)
		Retrieve func(op *operations.RetrieveCustomer) (*omise.Customer, error)
		Update   func(op *operations.UpdateCustomer) (*omise.Customer, error)
	}

	Dispute struct {
		List     func(op *operations.ListDisputes) (*omise.DisputeList, error)
		Retrieve func(op *operations.RetrieveDispute) (*omise.Dispute, error)
		Update   func(op *operations.UpdateDispute) (*omise.Dispute, error)
	}

	Recipient struct {
		Create   func(op *operations.CreateRecipient) (*omise.Recipient, error)
		Destroy  func(op *operations.DestroyRecipient) (*omise.Deletion, error)
		List     func(op *operations.ListRecipients) (*omise.RecipientList, error)
		Retrieve func(op *operations.RetrieveRecipient) (*omise.Recipient, error)
		Update   func(op *operations.UpdateRecipient) (*omise.Recipient, error)
	}

	Refund struct {
		Create   func(op *operations.CreateRefund) (*omise.Refund, error)
		List     func(op *operations.ListRefunds) (*omise.RefundList, error)
		Retrieve func(op *operations.RetrieveRefund) (*omise.Refund, error)
	}

	Token struct {
		Create   func(op *operations.CreateToken) (*omise.Token, error)
		Retrieve func(op *operations.RetrieveToken) (*omise.Token, error)
	}

	Transaction struct {
		List     func(op *operations.ListTransactions) (*omise.TransactionList, error)
		Retrieve func(op *operations.RetrieveTransaction) (*omise.Transaction, error)
	}

	Transfer struct {
		Create   func(op *operations.CreateTransfer) (*omise.Transfer, error)
		Destroy  func(op *operations.DestroyTransfer) (*omise.Deletion, error)
		List     func(op *operations.ListTransfers) (*omise.TransferList, error)
		Retrieve func(op *operations.RetrieveTransfer) (*omise.Transfer, error)
		Update   func(op *operations.UpdateTransfer) (*omise.Transfer, error)
	}
}

func With(client *omise.Client) *API {
	api := &API{}

	// _________________________________
	// Account API
	AccountAPI := api.Account

	AccountAPI.Retrieve = func(op *operations.RetrieveAccount) (*omise.Account, error) {
		result := &omise.Account{}
		if op == nil {
			op = &operations.RetrieveAccount{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Balance API
	BalanceAPI := api.Balance

	BalanceAPI.Retrieve = func(op *operations.RetrieveBalance) (*omise.Balance, error) {
		result := &omise.Balance{}
		if op == nil {
			op = &operations.RetrieveBalance{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Card API
	CardAPI := api.Card

	CardAPI.Destroy = func(op *operations.DestroyCard) (*omise.Deletion, error) {
		result := &omise.Deletion{}
		if op == nil {
			op = &operations.DestroyCard{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	CardAPI.List = func(op *operations.ListCards) (*omise.CardList, error) {
		result := &omise.CardList{}
		if op == nil {
			op = &operations.ListCards{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	CardAPI.Retrieve = func(op *operations.RetrieveCard) (*omise.Card, error) {
		result := &omise.Card{}
		if op == nil {
			op = &operations.RetrieveCard{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	CardAPI.Update = func(op *operations.UpdateCard) (*omise.Card, error) {
		result := &omise.Card{}
		if op == nil {
			op = &operations.UpdateCard{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Charge API
	ChargeAPI := api.Charge

	ChargeAPI.Capture = func(op *operations.CaptureCharge) (*omise.Charge, error) {
		result := &omise.Charge{}
		if op == nil {
			op = &operations.CaptureCharge{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	ChargeAPI.Create = func(op *operations.CreateCharge) (*omise.Charge, error) {
		result := &omise.Charge{}
		if op == nil {
			op = &operations.CreateCharge{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	ChargeAPI.List = func(op *operations.ListCharges) (*omise.ChargeList, error) {
		result := &omise.ChargeList{}
		if op == nil {
			op = &operations.ListCharges{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	ChargeAPI.Retrieve = func(op *operations.RetrieveCharge) (*omise.Charge, error) {
		result := &omise.Charge{}
		if op == nil {
			op = &operations.RetrieveCharge{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	ChargeAPI.Update = func(op *operations.UpdateCharge) (*omise.Charge, error) {
		result := &omise.Charge{}
		if op == nil {
			op = &operations.UpdateCharge{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Customer API
	CustomerAPI := api.Customer

	CustomerAPI.Create = func(op *operations.CreateCustomer) (*omise.Customer, error) {
		result := &omise.Customer{}
		if op == nil {
			op = &operations.CreateCustomer{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	CustomerAPI.Destroy = func(op *operations.DestroyCustomer) (*omise.Deletion, error) {
		result := &omise.Deletion{}
		if op == nil {
			op = &operations.DestroyCustomer{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	CustomerAPI.List = func(op *operations.ListCustomers) (*omise.CustomerList, error) {
		result := &omise.CustomerList{}
		if op == nil {
			op = &operations.ListCustomers{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	CustomerAPI.Retrieve = func(op *operations.RetrieveCustomer) (*omise.Customer, error) {
		result := &omise.Customer{}
		if op == nil {
			op = &operations.RetrieveCustomer{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	CustomerAPI.Update = func(op *operations.UpdateCustomer) (*omise.Customer, error) {
		result := &omise.Customer{}
		if op == nil {
			op = &operations.UpdateCustomer{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Dispute API
	DisputeAPI := api.Dispute

	DisputeAPI.List = func(op *operations.ListDisputes) (*omise.DisputeList, error) {
		result := &omise.DisputeList{}
		if op == nil {
			op = &operations.ListDisputes{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	DisputeAPI.Retrieve = func(op *operations.RetrieveDispute) (*omise.Dispute, error) {
		result := &omise.Dispute{}
		if op == nil {
			op = &operations.RetrieveDispute{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	DisputeAPI.Update = func(op *operations.UpdateDispute) (*omise.Dispute, error) {
		result := &omise.Dispute{}
		if op == nil {
			op = &operations.UpdateDispute{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Recipient API
	RecipientAPI := api.Recipient

	RecipientAPI.Create = func(op *operations.CreateRecipient) (*omise.Recipient, error) {
		result := &omise.Recipient{}
		if op == nil {
			op = &operations.CreateRecipient{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	RecipientAPI.Destroy = func(op *operations.DestroyRecipient) (*omise.Deletion, error) {
		result := &omise.Deletion{}
		if op == nil {
			op = &operations.DestroyRecipient{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	RecipientAPI.List = func(op *operations.ListRecipients) (*omise.RecipientList, error) {
		result := &omise.RecipientList{}
		if op == nil {
			op = &operations.ListRecipients{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	RecipientAPI.Retrieve = func(op *operations.RetrieveRecipient) (*omise.Recipient, error) {
		result := &omise.Recipient{}
		if op == nil {
			op = &operations.RetrieveRecipient{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	RecipientAPI.Update = func(op *operations.UpdateRecipient) (*omise.Recipient, error) {
		result := &omise.Recipient{}
		if op == nil {
			op = &operations.UpdateRecipient{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Refund API
	RefundAPI := api.Refund

	RefundAPI.Create = func(op *operations.CreateRefund) (*omise.Refund, error) {
		result := &omise.Refund{}
		if op == nil {
			op = &operations.CreateRefund{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	RefundAPI.List = func(op *operations.ListRefunds) (*omise.RefundList, error) {
		result := &omise.RefundList{}
		if op == nil {
			op = &operations.ListRefunds{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	RefundAPI.Retrieve = func(op *operations.RetrieveRefund) (*omise.Refund, error) {
		result := &omise.Refund{}
		if op == nil {
			op = &operations.RetrieveRefund{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Token API
	TokenAPI := api.Token

	TokenAPI.Create = func(op *operations.CreateToken) (*omise.Token, error) {
		result := &omise.Token{}
		if op == nil {
			op = &operations.CreateToken{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	TokenAPI.Retrieve = func(op *operations.RetrieveToken) (*omise.Token, error) {
		result := &omise.Token{}
		if op == nil {
			op = &operations.RetrieveToken{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Transaction API
	TransactionAPI := api.Transaction

	TransactionAPI.List = func(op *operations.ListTransactions) (*omise.TransactionList, error) {
		result := &omise.TransactionList{}
		if op == nil {
			op = &operations.ListTransactions{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	TransactionAPI.Retrieve = func(op *operations.RetrieveTransaction) (*omise.Transaction, error) {
		result := &omise.Transaction{}
		if op == nil {
			op = &operations.RetrieveTransaction{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	// _________________________________
	// Transfer API
	TransferAPI := api.Transfer

	TransferAPI.Create = func(op *operations.CreateTransfer) (*omise.Transfer, error) {
		result := &omise.Transfer{}
		if op == nil {
			op = &operations.CreateTransfer{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	TransferAPI.Destroy = func(op *operations.DestroyTransfer) (*omise.Deletion, error) {
		result := &omise.Deletion{}
		if op == nil {
			op = &operations.DestroyTransfer{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	TransferAPI.List = func(op *operations.ListTransfers) (*omise.TransferList, error) {
		result := &omise.TransferList{}
		if op == nil {
			op = &operations.ListTransfers{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	TransferAPI.Retrieve = func(op *operations.RetrieveTransfer) (*omise.Transfer, error) {
		result := &omise.Transfer{}
		if op == nil {
			op = &operations.RetrieveTransfer{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	TransferAPI.Update = func(op *operations.UpdateTransfer) (*omise.Transfer, error) {
		result := &omise.Transfer{}
		if op == nil {
			op = &operations.UpdateTransfer{}
		}
		if e := client.Do(result, op); e != nil {
			return nil, e
		}
		return result, nil
	}

	return api
}
